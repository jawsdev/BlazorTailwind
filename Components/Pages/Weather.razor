@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<div class="p-6 max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold text-yellow-800 mb-4">Weather</h1>
    <p class="mb-6 text-gray-600">This component demonstrates showing data.</p>

    @if (forecasts == null)
    {
        <p><em class="text-gray-500 font-bold">Loading...</em></p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" aria-label="Temperature in Celsius">Temp. (C)</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" aria-label="Temperature in Farenheit">Temp. (F)</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Summary</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap">@forecast.Date.ToShortDateString()</td>
                            <td class="px-6 py-4 whitespace-nowrap">@forecast.TemperatureC</td>
                            <td class="px-6 py-4 whitespace-nowrap">@forecast.TemperatureF</td>
                            <td class="px-6 py-4 whitespace-nowrap">@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
